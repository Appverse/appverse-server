1		- package sparklr.common;
1	+ package org.appverse.web.framework.backend.test.util.oauth2.tests.common;
2	2	  
3	3	  import java.util.ArrayList;
4	4	  import java.util.Collection;
5	5	  import java.util.Collections;
6	6	  import java.util.List;
7	7	  
8	8	  import javax.sql.DataSource;
9	9	  
10	10	  import org.junit.After;
11	11	  import org.junit.Before;
12	12	  import org.junit.Rule;
13	13	  import org.junit.runner.RunWith;
14	14	  import org.springframework.aop.framework.Advised;
15	15	  import org.springframework.beans.factory.annotation.Autowired;
16	16	  import org.springframework.beans.factory.annotation.Qualifier;
17	17	  import org.springframework.beans.factory.annotation.Value;
18	18	  import org.springframework.boot.autoconfigure.security.SecurityProperties;
19	19	  import org.springframework.boot.autoconfigure.web.ServerProperties;
20	20	  import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;
21	21	  import org.springframework.boot.test.IntegrationTest;
22	22	  import org.springframework.http.client.ClientHttpRequestInterceptor;
23	23	  import org.springframework.http.converter.HttpMessageConverter;
24	24	  import org.springframework.jdbc.core.JdbcTemplate;
25	25	  import org.springframework.security.crypto.codec.Base64;
26	26	  import org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails;
27	27	  import org.springframework.security.oauth2.client.test.BeforeOAuth2Context;
28	28	  import org.springframework.security.oauth2.client.test.OAuth2ContextSetup;
29		- import org.springframework.security.oauth2.client.token.AccessTokenProvider;
30		- import org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport;
31	29	  import org.springframework.security.oauth2.client.token.grant.implicit.ImplicitResourceDetails;
32	30	  import org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordResourceDetails;
33	31	  import org.springframework.security.oauth2.client.token.grant.redirect.AbstractRedirectResourceDetails;
34	32	  import org.springframework.security.oauth2.common.OAuth2AccessToken;
35	33	  import org.springframework.security.oauth2.provider.approval.ApprovalStore;
36	34	  import org.springframework.security.oauth2.provider.approval.InMemoryApprovalStore;
37	35	  import org.springframework.security.oauth2.provider.approval.JdbcApprovalStore;
38	36	  import org.springframework.security.oauth2.provider.token.ConsumerTokenServices;
39	37	  import org.springframework.security.oauth2.provider.token.TokenStore;
40	38	  import org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;
41	39	  import org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;
42	40	  import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
43	41	  import org.springframework.test.context.web.WebAppConfiguration;
44	42	  
45	43	  @RunWith(SpringJUnit4ClassRunner.class)
46	44	  @WebAppConfiguration
47	45	  @IntegrationTest("server.port=0")
48	46	  public abstract class AbstractIntegrationTests {
49	47	  
50	48	  	private static String globalTokenPath;
51	49	  
52	50	  	private static String globalTokenKeyPath;
53	51	  
54	52	  	private static String globalCheckTokenPath;
55	53	  
56	54	  	private static String globalAuthorizePath;
57	55	  
58	56	  	@Value("${local.server.port}")
59	57	  	private int port;
60	58	  
61	59	  	@Rule
62	60	  	public HttpTestUtils http = HttpTestUtils.standard();
63	61	  
64	62	  	@Rule
65	63	  	public OAuth2ContextSetup context = OAuth2ContextSetup.standard(http);
66	64	  
67	65	  	@Autowired
68	66	  	private EmbeddedWebApplicationContext container;
69	67	  
70	68	  	@Autowired(required = false)
71	69	  	private TokenStore tokenStore;
72	70	  
73	71	  	@Autowired(required = false)
74	72	  	private ApprovalStore approvalStore;
75	73	  
76	74	  	@Autowired(required = false)
77	75	  	private DataSource dataSource;
78	76	  
79	77	  	@Autowired
80	78	  	private SecurityProperties security;
81	79	  
82	80	  	@Autowired
83	81	  	private ServerProperties server;
84	82	  
85	83	  	@Autowired(required=false)
86	84	  	@Qualifier("consumerTokenServices")
87	85	  	private ConsumerTokenServices tokenServices;
88	86	  
89	87	  	@After
90	88	  	public void cancelToken() {
91	89	  		try {
92	90	  			OAuth2AccessToken token = context.getOAuth2ClientContext().getAccessToken();
93	91	  			if (token != null) {
94	92	  				tokenServices.revokeToken(token.getValue());
95	93	  			}
96	94	  		}
97	95	  		catch (Exception e) {
98	96	  			// ignore
99	97	  		}
100	98	  	}
101	99	  
102	100	  	protected void cancelToken(String value) {
103	101	  		try {
104	102	  			tokenServices.revokeToken(value);
105	103	  		}
106	104	  		catch (Exception e) {
107	105	  			// ignore
108	106	  		}
109		- 	}
110		- 
111		- 	protected AccessTokenProvider createAccessTokenProvider() {
112		- 		return null;
113	107	  	}
114	108	  
115	109	  	@Before
116	110	  	public void init() {
117	111	  		String prefix = server.getServletPrefix();
118	112	  		http.setPort(port);
119	113	  		http.setPrefix(prefix);
120		- 	}
121		- 
122		- 	@BeforeOAuth2Context
123		- 	public void setupAccessTokenProvider() {
124		- 		AccessTokenProvider accessTokenProvider = createAccessTokenProvider();
125		- 		if (accessTokenProvider instanceof OAuth2AccessTokenSupport) {
126		- 			((OAuth2AccessTokenSupport) accessTokenProvider).setRequestFactory(context
127		- 					.getRestTemplate().getRequestFactory());
128		- 			context.setAccessTokenProvider(accessTokenProvider);
129		- 		}
130	114	  	}
131	115	  
132	116	  	@BeforeOAuth2Context
133	117	  	public void fixPaths() {
134	118	  		String prefix = server.getServletPrefix();
135	119	  		http.setPort(port);
136	120	  		http.setPrefix(prefix);
137	121	  		BaseOAuth2ProtectedResourceDetails resource = (BaseOAuth2ProtectedResourceDetails) context.getResource();
138	122	  		List<HttpMessageConverter<?>> converters = new ArrayList<>(context.getRestTemplate().getMessageConverters());
139	123	  		converters.addAll(getAdditionalConverters());
140	124	  		context.getRestTemplate().setMessageConverters(converters);
141	125	  		context.getRestTemplate().setInterceptors(getInterceptors());
142	126	  		resource.setAccessTokenUri(http.getUrl(tokenPath()));
143	127	  		if (resource instanceof AbstractRedirectResourceDetails) {
144	128	  			((AbstractRedirectResourceDetails) resource).setUserAuthorizationUri(http.getUrl(authorizePath()));
145	129	  		}
146	130	  		if (resource instanceof ImplicitResourceDetails) {
147	131	  			resource.setAccessTokenUri(http.getUrl(authorizePath()));
148	132	  		}
149	133	  		if (resource instanceof ResourceOwnerPasswordResourceDetails && !(resource instanceof DoNotOverride)) {
150	134	  			((ResourceOwnerPasswordResourceDetails) resource).setUsername(getUsername());
151	135	  			((ResourceOwnerPasswordResourceDetails) resource).setPassword(getPassword());
152	136	  		}
153	137	  	}
154	138	  
155	139	  	protected List<ClientHttpRequestInterceptor> getInterceptors() {
156	140	  		return Collections.emptyList();
157	141	  	}
158	142	  
159	143	  	protected Collection<? extends HttpMessageConverter<?>> getAdditionalConverters() {
160	144	  		return Collections.emptySet();
161		- 	}
162		- 
163		- 	protected String getPassword() {
164		- 		return security.getUser().getPassword();
165		- 	}
166		- 
167		- 	protected String getUsername() {
168		- 		return security.getUser().getName();
169	145	  	}
170		- 
146	+ 	
171	147	  	public interface DoNotOverride {
172	148	  
173	149	  	}
174	150	  
175	151	  	@After
176	152	  	public void close() throws Exception {
177	153	  		clear(tokenStore);
178	154	  		clear(approvalStore);
179	155	  	}
180	156	  
181	157	  	protected String getBasicAuthentication() {
182	158	  		return "Basic " + new String(Base64.encode((getUsername() + ":" + getPassword()).getBytes()));
183	159	  	}
184	160	  
185	161	  	private void clear(ApprovalStore approvalStore) throws Exception {
186	162	  		if (approvalStore instanceof Advised) {
187	163	  			Advised advised = (Advised) tokenStore;
188	164	  			ApprovalStore target = (ApprovalStore) advised.getTargetSource().getTarget();
189	165	  			clear(target);
190	166	  			return;
191	167	  		}
192	168	  		if (approvalStore instanceof InMemoryApprovalStore) {
193	169	  			((InMemoryApprovalStore) approvalStore).clear();
194	170	  		}
195	171	  		if (approvalStore instanceof JdbcApprovalStore) {
196	172	  			JdbcTemplate template = new JdbcTemplate(dataSource);
197	173	  			template.execute("delete from oauth_approvals");
198	174	  		}
199	175	  	}
200	176	  
201	177	  	private void clear(TokenStore tokenStore) throws Exception {
202	178	  		if (tokenStore instanceof Advised) {
203	179	  			Advised advised = (Advised) tokenStore;
204	180	  			TokenStore target = (TokenStore) advised.getTargetSource().getTarget();
205	181	  			clear(target);
206	182	  			return;
207	183	  		}
208	184	  		if (tokenStore instanceof InMemoryTokenStore) {
209	185	  			((InMemoryTokenStore) tokenStore).clear();
210	186	  		}
211	187	  		if (tokenStore instanceof JdbcTokenStore) {
212	188	  			JdbcTemplate template = new JdbcTemplate(dataSource);
213	189	  			template.execute("delete from oauth_access_token");
214	190	  			template.execute("delete from oauth_refresh_token");
215	191	  			template.execute("delete from oauth_client_token");
216	192	  			template.execute("delete from oauth_code");
217	193	  		}
218	194	  	}
219	195	  
220	196	  	@Value("${oauth.paths.token:/oauth/token}")
221	197	  	public void setTokenPath(String tokenPath) {
222	198	  		globalTokenPath = tokenPath;
223	199	  	}
224	200	  
225	201	  	@Value("${oauth.paths.token_key:/oauth/token_key}")
226	202	  	public void setTokenKeyPath(String tokenKeyPath) {
227	203	  		globalTokenKeyPath = tokenKeyPath;
228	204	  	}
229	205	  
230	206	  	@Value("${oauth.paths.check_token:/oauth/check_token}")
231	207	  	public void setCheckTokenPath(String tokenPath) {
232	208	  		globalCheckTokenPath = tokenPath;
233	209	  	}
234	210	  
235	211	  	@Value("${oauth.paths.authorize:/oauth/authorize}")
236	212	  	public void setAuthorizePath(String authorizePath) {
237	213	  		globalAuthorizePath = authorizePath;
238	214	  	}
239	215	  
240	216	  	public static String tokenPath() {
241	217	  		return globalTokenPath;
242	218	  	}
243	219	  
244	220	  	public static String tokenKeyPath() {
245	221	  		return globalTokenKeyPath;
246	222	  	}
247	223	  
248	224	  	public static String checkTokenPath() {
249	225	  		return globalCheckTokenPath;
250	226	  	}
251	227	  
252	228	  	public static String authorizePath() {
253	229	  		return globalAuthorizePath;
254	230	  	}
231	+ 	
232	+ 	protected abstract String getPassword();
233	+ 
234	+ 	protected abstract String getUsername();
255	235	  
256	236	  }