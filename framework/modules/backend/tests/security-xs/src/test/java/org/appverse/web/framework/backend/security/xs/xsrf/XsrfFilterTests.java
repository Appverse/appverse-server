/*
 Copyright (c) 2012 GFT Appverse, S.L., Sociedad Unipersonal.

 This Source Code Form is subject to the terms of the Appverse Public License 
 Version 2.0 (“APL v2.0�?). If a copy of the APL was not distributed with this 
 file, You can obtain one at http://www.appverse.mobi/licenses/apl_v2.0.pdf. [^]

 Redistribution and use in source and binary forms, with or without modification, 
 are permitted provided that the conditions of the AppVerse Public License v2.0 
 are met.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. EXCEPT IN CASE OF WILLFUL MISCONDUCT OR GROSS NEGLIGENCE, IN NO EVENT
 SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) 
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 POSSIBILITY OF SUCH DAMAGE.
 */
package org.appverse.web.framework.backend.security.xs.xsrf;

import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.appverse.web.framework.backend.frontfacade.rest.remotelog.model.presentation.RemoteLogRequestVO;
import org.appverse.web.framework.backend.security.authentication.userpassword.model.AuthorizationData;
import org.appverse.web.framework.backend.security.xs.SecurityHelper;
import org.appverse.web.framework.backend.frontfacade.rest.authentication.basic.services.BasicAuthenticationService;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.boot.test.TestRestTemplate;
import org.springframework.boot.test.WebIntegrationTest;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter;
import org.springframework.security.crypto.codec.Base64;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

/**
 * IMPORTANT: If you use an authentication method that relies on JSESSIONID, you need to set the Spring Boot property
 * that controls http session creation strategy as:
 * security.sessions=NEVER
 * This mean that Spring will never create an HttpSession proactively but if it exists it will use it.
 * Spring default value is 'STATELESS' which means that Spring will never create an HttpSession proactively and it will
 * never use it.
 * This test uses Appverse Web {@link BasicAuthenticationService} for basic authentication and for XSRF token creation.
 * It relies on JSESSIONID so we have added the property to application.properties.
 * Take into account that if you use external generation for the XSRF token (is not generated by the own filter) you need
 * to exclude the URI that generates the XSRF token, in this case we have added the property:
 * appverse.security.xs.xsrffilter.exclude=/api/sec/login
 * 
 * Necessary to have httpclient for this tests (with scope tests) so that the http returns are handle correctly.
 * Otherwise you will experience exactly the problem described here:
 * http://stackoverflow.com/questions/27341604/exception-when-using-testresttemplate 
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = {XsrfTestsConfigurationApplication.class})
@WebIntegrationTest(randomPort= true)
public class XsrfFilterTests {
	
	@Autowired
	private AnnotationConfigEmbeddedWebApplicationContext context;
	
	// Be Careful!!! TestRestTemplate ignores cookies
	TestRestTemplate restTemplate = new TestRestTemplate();
	
	/* Former filter configuration is now perform by means XSRFFilterAutoConfiguration which provides
	  default setup and allows you to override properties using standard Spring Boot way 
	  (application.properties, for instance) 
	 <filter>
        <filter-name>XSRFFilter</filter-name>
        <filter-class>org.appverse.web.framework.backend.api.helpers.security.XSRFCheckFilter</filter-class>
             <init-param>
                <param-name>match</param-name>
                <param-value>*</param-value>
            </init-param>
            <init-param>
            	<param-name>wildcards</param-name>
            	<param-value>false</param-value>
            </init-param>
            <init-param>
                <param-name>getXsrfPath</param-name>
                <param-value>getXSRFSessionToken</param-value>
            </init-param>
    </filter>
    <filter-mapping>
    	<filter-name>XSRFFilter</filter-name>
    	<url-pattern>/admin/rest/*</url-pattern>
    </filter-mapping>
	 */	
	
	
	@Test
	public void testInitParameterConfiguration() {
		FilterRegistrationBean registrationBean = this.context.getBean("xsrfFilter",
				FilterRegistrationBean.class);
		assertThat(registrationBean.getInitParameters().size(), equalTo(5));
		assertThat(registrationBean.getInitParameters().get("urlPattern"),
				equalTo("/api/*"));		
		assertThat(registrationBean.getInitParameters().get("match"),
				equalTo("*"));
		assertThat(registrationBean.getInitParameters().get("wildcards"),
				equalTo("false"));
		assertThat(registrationBean.getInitParameters().get("getXsrfPath"),
				equalTo("getXSRFSessionToken"));
		assertThat(registrationBean.getInitParameters().get("exclude"),
				equalTo("/api/sec/login"));
	}
	
	
	/*
	 * Enable this init method if you need to use a proxy to debug (fiddler, for instance)
	 * This is required as passing regular JVM arguments for proxy setup seems not to work with RestTemplate
	 * as it uses Apache HttpClient 
    @Before
    public void initProxy(){    	
		SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();
	    Proxy proxy= new Proxy(Type.HTTP, new InetSocketAddress("localhost", 8888));
	    requestFactory.setProxy(proxy);
	    restTemplate = new RestTemplate(requestFactory);    	
    }
	 */
	
	@Test
	public void testFilterWithoutXSRFToken() throws Exception{		
		this.context.register(AuthenticationManagerCustomizer.class);
		
		int port = context.getEmbeddedServletContainer().getPort();
		
		// Step 1: Login and obtaining a XSRF Token
		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization", "Basic " + new String(Base64.encode("user:password".getBytes("UTF-8"))));
		HttpEntity<String> entity = new HttpEntity<String>("headers", headers);

		ResponseEntity<AuthorizationData> responseEntity = restTemplate.exchange("http://localhost:" + port + "/api/sec/login", HttpMethod.POST, entity, AuthorizationData.class);
		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
		
		List<String> xsrfTokenHeaders = responseEntity.getHeaders().get(SecurityHelper.XSRF_TOKEN_NAME);
		assertNotNull(xsrfTokenHeaders);
		assertEquals(xsrfTokenHeaders.size(), 1);
		assertNotNull(xsrfTokenHeaders.get(0));
				
		AuthorizationData authorizationData = responseEntity.getBody();
		assertNotNull(authorizationData);
		List<String> roles = authorizationData.getRoles();
		assertNotNull(roles);
		assertEquals(roles.size(), 1);
		assertEquals(roles.get(0), "ROLE_USER");
		
		// Step 2: Calling a protected resource without using the XSRF Token
		headers = new HttpHeaders();
		String JSESSIONID_HEADER = responseEntity.getHeaders().getFirst("Set-Cookie");		
		headers.set(HttpHeaders.COOKIE, JSESSIONID_HEADER);
		
		// Content type need to be specified otherwise we receive a 415
		headers.setContentType(MediaType.APPLICATION_JSON);
		
		RemoteLogRequestVO logRequestVO = new RemoteLogRequestVO();
		logRequestVO.setMessage("Test mesage!");
		logRequestVO.setLogLevel("DEBUG");
		
		ResponseEntity<String> logResponseEntity = restTemplate.exchange("http://localhost:" + port + "/api/remotelog/log", HttpMethod.POST, new HttpEntity<RemoteLogRequestVO>(logRequestVO, headers), String.class);
		assertEquals(HttpStatus.UNAUTHORIZED, logResponseEntity.getStatusCode());
	}		
	
	@Test
	public void testFilterWithCorrectXSRFToken() throws Exception{		
		this.context.register(AuthenticationManagerCustomizer.class);
		
		int port = context.getEmbeddedServletContainer().getPort();
		
		// Step 1: Login and obtaining a XSRF Token
		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization", "Basic " + new String(Base64.encode("user:password".getBytes("UTF-8"))));
		HttpEntity<String> entity = new HttpEntity<String>("headers", headers);

		ResponseEntity<AuthorizationData> responseEntity = restTemplate.exchange("http://localhost:" + port + "/api/sec/login", HttpMethod.POST, entity, AuthorizationData.class);
		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
		
		List<String> xsrfTokenHeaders = responseEntity.getHeaders().get(SecurityHelper.XSRF_TOKEN_NAME);
		assertNotNull(xsrfTokenHeaders);
		assertEquals(xsrfTokenHeaders.size(), 1);
		assertNotNull(xsrfTokenHeaders.get(0));
		String xsrfToken = xsrfTokenHeaders.get(0);
				
		AuthorizationData authorizationData = responseEntity.getBody();
		assertNotNull(authorizationData);
		List<String> roles = authorizationData.getRoles();
		assertNotNull(roles);
		assertEquals(roles.size(), 1);
		assertEquals(roles.get(0), "ROLE_USER");
		
		// Step 2: Using the XSRF Token calling a protected resource
		headers = new HttpHeaders();
		String JSESSIONID_HEADER = responseEntity.getHeaders().getFirst("Set-Cookie");		
		headers.set(HttpHeaders.COOKIE, JSESSIONID_HEADER);
		headers.set(SecurityHelper.XSRF_TOKEN_NAME, xsrfToken);
		
		
		// Content type need to be specified otherwise we receive a 415
		headers.setContentType(MediaType.APPLICATION_JSON);
		
		RemoteLogRequestVO logRequestVO = new RemoteLogRequestVO();
		logRequestVO.setMessage("Test mesage!");
		logRequestVO.setLogLevel("DEBUG");
		
		ResponseEntity<String> logResponseEntity = restTemplate.exchange("http://localhost:" + port + "/api/remotelog/log", HttpMethod.POST, new HttpEntity<RemoteLogRequestVO>(logRequestVO, headers), String.class);
		assertEquals(HttpStatus.OK, logResponseEntity.getStatusCode());
	}
			
	@Configuration
	@Order(-1)
	protected static class AuthenticationManagerCustomizer extends
			GlobalAuthenticationConfigurerAdapter {

		@Override
		public void init(AuthenticationManagerBuilder auth) throws Exception {
			auth.inMemoryAuthentication().withUser("user").password("password").roles("USER");
		}
	}	
}
